{"version":3,"sources":["logo.svg","Login.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","handleClick","alert","_this2","this","react_default","a","createElement","onClick","Component","Users","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addUser","users","state","tag","push","setState","renderUser","user","renderClient","name","email","client","console","log","fetch","then","response","json","_this3","style","border","map","App","src_Login","src_Users","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCezBC,0NAZXC,YAAc,WACVC,MAAM,oFAEA,IAAAC,EAAAC,KACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAIL,EAAKF,gBAAvB,gBANQQ,cCiELC,cAhEX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACTC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,QAiBJa,QAAU,WACN,IAAIC,EAAQP,EAAKQ,MAAMD,MACnBE,EAAMT,EAAKQ,MAAMC,IACrBF,EAAMG,KAAK,YAAcD,GACzBT,EAAKW,SAAS,CACVJ,MAAQA,EACRE,IAAMA,EAAM,KAxBPT,EA2BbY,WAAa,SAACC,GACV,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,2BAAL,MAAmCiB,EAAnC,IAA0CA,KA9BzCb,EAkCbc,aAAe,SAACD,GACZ,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,6BAAL,MAAqCiB,EAAKE,KAA1C,IAAiDF,EAAKG,SAnC9DhB,EAAKQ,MAAQ,CACTD,MAAQ,GACRU,OAAO,GACPR,IAAM,GALDT,mFAQO,IAAAR,EAAAC,KAChByB,QAAQC,IAAI,qBACZC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACF/B,EAAKmB,SAAS,CACVM,OAASM,uCA2BX,IAAAC,EAAA/B,KAEN,OADAyB,QAAQC,IAAI,UAERzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAI2B,EAAKlB,WAAWmB,MAAO,CAACC,OAAO,kBAAjD,YAAiFhC,EAAAC,EAAAC,cAAA,WAE7EH,KAAKe,MAAMS,OAAOU,IAAI,SAACd,GACnB,OAAOW,EAAKV,aAAaD,KAGjCnB,EAAAC,EAAAC,cAAA,WAEIH,KAAKe,MAAMD,MAAMoB,IAAI,SAACd,GAClB,OAAOW,EAAKZ,WAAWC,cAvD3Bf,aCcL8B,mLATX,OACElC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cALQhC,aCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.dcea6772.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass Login extends Component {\n    handleClick = () => {\n        alert(\"clicked\");\n    }\n    render () {\n        return (\n            <div onClick={()=>this.handleClick()}>\n                Login\n            </div>\n        )\n    }\n}\n\nexport default Login","import React, { Component } from 'react'\n\nclass Users extends Component {\n    constructor(){\n        super();\n        this.state = {\n            users : [],\n            client:[],\n            tag : 1\n        }\n    }\n    componentDidMount() {\n        console.log(\"componentDidMount\");\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(json => {\n            this.setState({\n                client : json\n            })\n        })\n    }\n    addUser = () => {\n        let users = this.state.users;\n        let tag = this.state.tag;\n        users.push(\"New User \" + tag)\n        this.setState({\n            users : users,\n            tag : tag + 1\n        })\n    }\n    renderUser = (user) => {\n        return (\n            <div>\n                <div><strong>User Name</strong> : {user} {user}</div>\n            </div>\n        );\n    }\n    renderClient = (user) => {\n        return (\n            <div>\n                <div><strong>Client Name</strong> : {user.name} {user.email}</div>\n            </div>\n        );\n    }\n    render () {\n        console.log(\"render\");\n        return (\n            <div>\n                <div onClick={()=>this.addUser()} style={{border:'solid 1px red'}}>Add User</div><br />\n                {\n                    this.state.client.map((user) => {\n                        return this.renderClient(user)\n                    } )\n                }\n                <div>\n                {\n                    this.state.users.map((user) => {\n                        return this.renderUser(user)\n                    } )\n                }\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default Users","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './Login';\nimport Users from  './Users';\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <Login />\n          <Users />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}